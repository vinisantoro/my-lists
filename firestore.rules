rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function canWriteToList(listId) {
      let list = get(/databases/$(database)/documents/lists/$(listId)).data;
      return request.auth.uid == list.ownerId ||
             (list.writerEmails != null && request.auth.token.email in list.writerEmails);
    }
    match /items/{itemId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.token.email in get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.sharedEmails
      );
      allow write: if request.auth != null && canWriteToList(resource.data.listId);
      allow create: if request.auth != null
        && request.resource.data.userId == get(/databases/$(database)/documents/lists/$(request.resource.data.listId)).data.ownerId
        && canWriteToList(request.resource.data.listId)
        && request.resource.data.name is string
        && request.resource.data.brand is string
        && request.resource.data.category is string
        && request.resource.data.listId is string
        && request.resource.data.rating is number
        && request.resource.data.name.size() > 0 && request.resource.data.name.size() <= 200
        && request.resource.data.brand.size() > 0 && request.resource.data.brand.size() <= 100
        && request.resource.data.category.size() > 0 && request.resource.data.category.size() <= 50
        && request.resource.data.rating >= 0 && request.resource.data.rating <= 5;
    }

    match /userPreferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /sharedLists/{shareId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId
        && request.resource.data.invitedEmail is string
        && request.resource.data.permission in ['read', 'write']
        && request.resource.data.listId is string;
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        request.auth.token.email == resource.data.invitedEmail
      );
      allow delete, update: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }

    match /lists/{listId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        request.auth.token.email in resource.data.sharedEmails
      );
      allow write: if request.auth != null && request.auth.uid == resource.data.ownerId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0 && request.resource.data.name.size() <= 100;
    }
  }
}
